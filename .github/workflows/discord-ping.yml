name: discord-rich-embed

on:
  push:
    branches: [ main ]            # ← zmień, jeśli ping ma iść z innej gałęzi

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ pobierz kod – dwa commity wystarczą do diff-a
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    # 2️⃣ oblicz zmienione pliki, zbuduj zmienne pomocnicze
    - id: build
      run: |
        set -euo pipefail

        before='${{ github.event.before }}'
        after='${{ github.event.after }}'

        # lista zmienionych plików
        if [[ "$before" == 0000000000000000000000000000000000000000 ]]; then
          files=$(git diff --name-only "$after")
        else
          files=$(git diff --name-only "$before" "$after")
        fi
        count=$(echo "$files" | wc -l)
        list=$(echo "$files" | head -n5)            # ← 5 pierwszych, jak w przykładzie

        block='(brak zmian)'
        if [[ -n "$list" ]]; then
          block='```'"$list"'```'
          (( count > 5 )) && block+="\n…i $((count-5)) więcej"
        fi

        # pierwsza linia commit-message
        title=$(printf '%s' '${{ github.event.head_commit.message }}' \
                | head -n1 | head -c256)

        echo "COUNT=$count"     >> "$GITHUB_OUTPUT"
        echo "BLOCK<<EOF"       >> "$GITHUB_OUTPUT"
        echo "$block"           >> "$GITHUB_OUTPUT"
        echo "EOF"              >> "$GITHUB_OUTPUT"
        echo "TITLE=$title"     >> "$GITHUB_OUTPUT"

    # 3️⃣ wygeneruj JSON i wyślij POST do Discorda
    - name: Send Discord embed
      env:
        WEBHOOK_URL:  ${{ secrets.DISCORD_WEBHOOK }}

        REPO:         ${{ github.repository }}
        BRANCH:       ${{ github.ref_name }}
        ACTOR:        ${{ github.actor }}
        COMMIT_URL:   ${{ github.event.head_commit.url }}
        SHA:          ${{ github.sha }}
        FILE_COUNT:   ${{ steps.build.outputs.COUNT }}
        FILE_BLOCK:   ${{ steps.build.outputs.BLOCK }}
        COMMIT_TITLE: ${{ steps.build.outputs.TITLE }}
      run: |
        set -euo pipefail
        [[ -z "$WEBHOOK_URL" ]] && { echo "::error::brak sekretu DISCORD_WEBHOOK"; exit 1; }

        SHORT_SHA=${SHA:0:7}
        PUSH_TITLE="Push → ${REPO} [${BRANCH}]"
        TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        AVATAR="https://github.com/${ACTOR}.png?size=40"
        FILES_FIELD="Pliki (${FILE_COUNT})"

        # zbuduj JSON za pomocą jq (bez łączenia stringów w jq ⇒ działa w 1.5)
        payload=$(jq -n \
          --arg content "@everyone" \
          --arg push_title "$PUSH_TITLE" \
          --arg url "$COMMIT_URL" \
          --arg actor "$ACTOR" \
          --arg avatar "$AVATAR" \
          --arg commit_title "$COMMIT_TITLE" \
          --arg files_field "$FILES_FIELD" \
          --arg files_value "$FILE_BLOCK" \
          --arg sha "$SHORT_SHA" \
          --arg timestamp "$TIMESTAMP" \
          --argjson color 5814783 \
          '{
             content: $content,
             embeds: [{
               title: $push_title,
               url:   $url,
               color: $color,
               author: { name: $actor,
                         url: ("https://github.com/" + $actor),
                         icon_url: $avatar },
               fields: [
                 { name: "Commit", value: $commit_title,    inline: false },
                 { name: $files_field, value: $files_value, inline: false }
               ],
               footer: { text: ("SHA " + $sha) },
               timestamp: $timestamp
             }]
           }')

        echo "$payload" > payload.json              # podgląd w logach
        code=$(curl -sSL -o /dev/null -w '%{http_code}' \
               -H "Content-Type: application/json" \
               -d @payload.json "$WEBHOOK_URL")

        echo "Discord HTTP $code"
        [[ "$code" != "204" ]] && exit 1
