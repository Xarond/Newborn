name: Discord embed ping

on:
  push:
    branches: [ main ]          # ← zmień, jeśli używasz innej gałęzi

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣  Klon repo z co najmniej dwoma commitami (potrzebne do git diff)
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2          # 0 = cała historia; 2 jest szybsze i wystarcza

    # 2️⃣  (opcjonalnie) doinstaluj jq, jeśli runner kiedyś by go nie miał
    - name: Ensure jq is present
      run: sudo apt-get update && sudo apt-get install -y jq

    # 3️⃣  Zbierz listę zmienionych plików
    - name: Collect changed files
      id: diff
      run: |
        BEFORE="${{ github.event.before }}"
        AFTER="${{ github.event.after }}"

        # Jeśli to pierwszy push (BEFORE = 0000...), zrób diff tylko względem AFTER
        if [[ "$BEFORE" == "0000000000000000000000000000000000000000" ]]; then
          ALL=$(git diff --name-only "$AFTER")
        else
          ALL=$(git diff --name-only "$BEFORE" "$AFTER")
        fi

        LIST=$(echo "$ALL" | head -n 15 | paste -sd '\n' -)
        COUNT=$(echo "$ALL" | wc -l)

        {
          echo 'list<<EOF'
          echo "$LIST"
          echo 'EOF'
          echo "count=$COUNT"
        } >> "$GITHUB_OUTPUT"

    # 4️⃣  Wyślij embed do Discorda
    - name: Send neat Discord embed
      env:
        WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        REPO:        ${{ github.repository }}
        BRANCH:      ${{ github.ref_name }}
        ACTOR:       ${{ github.actor }}
        SHA:         ${{ github.sha }}
        COMMIT_URL:  ${{ github.event.head_commit.url }}
        COMMIT_MSG:  ${{ github.event.head_commit.message }}
        FILE_LIST:   ${{ steps.diff.outputs.list }}
        FILE_COUNT:  ${{ steps.diff.outputs.count }}
      run: |
        set -e

        if [ -z "$WEBHOOK_URL" ]; then
          echo "::error::Brak sekretu DISCORD_WEBHOOK"
          exit 1
        fi

        # 1️⃣ Pierwsza linia commit-message do opisu (max 256 znaków)
        COMMIT_TITLE=$(echo "$COMMIT_MSG" | head -n1 | head -c256)

        # 2️⃣ Przygotuj listę plików do code-blocka (limit 10 linijek)
        if [ -z "$FILE_LIST" ]; then
          FILES_BLOCK="(brak zmian)"
        else
          FILES_BLOCK=$(echo "$FILE_LIST" | head -n10)
          [ "$FILE_COUNT" -gt 10 ] && FILES_BLOCK="$FILES_BLOCK\n…i $(($FILE_COUNT-10)) więcej"
        fi

        # 3️⃣ JSON embeda
        JSON=$(jq -n \
          --arg content "@everyone" \
          --arg repo   "$REPO" \
          --arg branch "$BRANCH" \
          --arg url    "$COMMIT_URL" \
          --arg actor  "$ACTOR" \
          --arg avatar "https://github.com/$ACTOR.png?size=40" \
          --arg commit "$COMMIT_TITLE" \
          --arg files  "$FILES_BLOCK" \
          --arg sha    "${SHA:0:7}" \
          --argjson color 5814783 \
          '{
             content: $content,
             embeds: [{
               title: ("Push → " + $repo + " [" + $branch + "]"),
               url:   $url,
               color: $color,
               author: { name: $actor, url: ("https://github.com/" + $actor), icon_url: $avatar },
               fields: [
                 { name: "Commit", value: $commit, inline: false },
                 { name: "Pliki (" + ($files|split("\n")|length|tostring) + ")", value: ("```" + $files + "```"), inline: false }
               ],
               footer: { text: ("SHA " + $sha) },
               timestamp: (now|toiso8601)
             }]
           }')

        # 4️⃣ Wyślij i waliduj
        CODE=$(curl -sSL -o /dev/null -w '%{http_code}' \
               -H "Content-Type: application/json" -d "$JSON" "$WEBHOOK_URL")
        echo "Discord HTTP $CODE"
        [ "$CODE" -ne 204 ] && exit 1


