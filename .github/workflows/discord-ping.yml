name: Discord embed ping

on:
  push:
    branches: [ main ]      # ← zmień, jeśli używasz innej gałęzi

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ pobierz kod (wystarczą 2 ostatnie commity, żeby działał git diff)
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    # 2️⃣ zbierz listę zmienionych plików
    - name: Collect changed files
      id: diff
      run: |
        BEFORE="${{ github.event.before }}"
        AFTER="${{ github.event.after }}"

        # pierwszy push w repo: BEFORE = zera
        if [[ "$BEFORE" == "0000000000000000000000000000000000000000" ]]; then
          ALL=$(git diff --name-only "$AFTER")
        else
          ALL=$(git diff --name-only "$BEFORE" "$AFTER")
        fi

        LIST=$(echo "$ALL" | head -n 15)
        COUNT=$(echo "$ALL" | wc -l)

        {
          echo 'list<<EOF'
          echo "$LIST"
          echo 'EOF'
          echo "count=$COUNT"
        } >> "$GITHUB_OUTPUT"

    # 3️⃣ wyślij embed do Discorda
    - name: Send Discord embed
      env:
        WEBHOOK_URL:  ${{ secrets.DISCORD_WEBHOOK }}

        # kontekst GitHuba
        REPO:         ${{ github.repository }}
        BRANCH:       ${{ github.ref_name }}
        ACTOR:        ${{ github.actor }}
        SHA:          ${{ github.sha }}
        COMMIT_URL:   ${{ github.event.head_commit.url }}
        COMMIT_MSG:   ${{ github.event.head_commit.message }}

        # dane z kroku diff
        FILE_LIST:    ${{ steps.diff.outputs.list }}
        FILE_COUNT:   ${{ steps.diff.outputs.count }}
      run: |
        set -euo pipefail

        # --- 0. Walidacja sekretu ------------------------------------------
        [[ -z "$WEBHOOK_URL" ]] && {
          echo "::error::Sekret DISCORD_WEBHOOK nie jest ustawiony"; exit 1; }

        # --- 1. Tytuł commita (pierwsza linia, 256 znaków) -----------------
        COMMIT_TITLE=$(echo "$COMMIT_MSG" | head -n1 | head -c256)

        # --- 2. Blok plików -------------------------------------------------
        if [[ -z "$FILE_LIST" ]]; then
          FILES_BLOCK="(brak zmian)"
        else
          FILES_BLOCK=$(echo "$FILE_LIST" | head -n10)
          (( FILE_COUNT > 10 )) && \
            FILES_BLOCK+="\n…i $((FILE_COUNT-10)) więcej"
        fi
        FILES_BLOCK="\`\`\`\n${FILES_BLOCK}\n\`\`\`"

        # --- 3. Funkcja JSON-escape (korzystamy z python3) ------------------
        esc() { python3 -c 'import json,sys; print(json.dumps(sys.stdin.read())[1:-1])'; }
        ESC_COMMIT=$(printf '%s' "$COMMIT_TITLE" | esc)
        ESC_FILES=$(printf  '%s' "$FILES_BLOCK"  | esc)

        AVATAR_URL="https://github.com/$ACTOR.png?size=40"
        SHORT_SHA=${SHA:0:7}
        TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

        # --- 4. Payload JSON (heredoc) --------------------------------------
        read -r -d '' PAYLOAD <<EOF
{
  "content": "@everyone",
  "embeds": [{
    "title": "Push → $REPO [$BRANCH]",
    "url": "$COMMIT_URL",
    "color": 5814783,
    "author": {
      "name": "$ACTOR",
      "url": "https://github.com/$ACTOR",
      "icon_url": "$AVATAR_URL"
    },
    "fields": [
      { "name": "Commit",          "value": "$ESC_COMMIT", "inline": false },
      { "name": "Pliki ($FILE_COUNT)", "value": "$ESC_FILES", "inline": false }
    ],
    "footer": { "text": "SHA $SHORT_SHA" },
    "timestamp": "$TIMESTAMP"
  }]
}
EOF

        echo "== Payload wysyłany do Discorda =="
        echo "$PAYLOAD"

        # --- 5. POST do Discorda + walidacja kodu HTTP ----------------------
        CODE=$(curl -sSL -o /dev/null -w '%{http_code}' \
                 -H "Content-Type: application/json" \
                 -d "$PAYLOAD" "$WEBHOOK_URL")

        echo "Discord HTTP $CODE"
        [[ "$CODE" -ne 204 ]] && exit 1   # 204 = sukces
